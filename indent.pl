#!/usr/bin/perl
# C, C++ 対応．perl や Ruby などの正規表現を使用しているコードには使わない方が良い．
use strict;
use warnings;

while(<>){

	# '=' を抽出(代入演算子以外の'='を抽出)
	$_=~s/([^ \+\-\*\/%&|^!<>=])=([^ <>=~])/$1 = $2/g; # 前後に空白もメタ文字も無い時
	$_=~s/ =([^ <>=~])/ = $1/g; # 前に空白はあるが後ろに空白が無い時
	$_=~s/([^ \+\-\*\/%&|^!<>=])= /$1 = /g; # 前に空白が無くて後ろに空白がある時

	# "==" を抽出
	$_=~s/([^ =])==([^ =])/$1 == $2/g;
	$_=~s/ ==([^ =])/ == $1/g;
	$_=~s/([^ =])== /$1 == /g;

	# "+=" などの代入演算子を抽出
	$_=~s/([^ ])(\+=|\-=|\*=|\/=|%=|&=|\|=|^=|!=)([^ ])/$1 $2 $3/g;
	$_=~s/ (\+=|\-=|\*=|\/=|%=|&=|\|=|^=|!=)([^ ])/ $1 $2/g;
	$_=~s/([^ ])(\+=|\-=|\*=|\/=|%=|&=|\|=|^=|!=) /$1 $2 /g;

	# ">=" の抽出
	$_=~s/([^ <>])(>=|<=)([^ ])/$1 $2 $3/g;
	$_=~s/ (>=|<=)([^ ])/ $1 $2/g;
	$_=~s/([^ <>])(>=|<=) /$1 $2 /g;

	# ">>=" の抽出
	$_=~s/([^ ])(<<=|>>=)([^ ])/$1 $2 $3/g;
	$_=~s/ (<<=|>>=)([^ ])/ $1 $2/g;
	$_=~s/([^ ])(<<=|>>=) /$1 $2 /g;

	# "<<" と ">>" の抽出
	$_=~s/([^ ])(<<|>>)([^ =])/$1 $2 $3/g;
	$_=~s/ (<<|>>)([^ =])/ $1 $2/g;
	$_=~s/([^ ])(<<|>>) /$1 $2 /g;

	# "//" の抽出
	$_=~s/(\S)\/\/(\S)/$1 \/\/ $2/g;
	$_=~s/(\s)\/\/(\S)/$1\/\/ $2/g;
	$_=~s/(\S)\/\/(\s)/$1 \/\/$2/g;
	$_=~s/^\/\/(\S)/\/\/ $1/g;

	# "&&" と "||" の抽出
	$_=~s/([^ ])(&&|\|\|)([^ ])/$1 $2 $3/g;
	$_=~s/ (&&|\|\|)([^ ])/ $1 $2/g;
	$_=~s/([^ ])(&&|\|\|) /$1 $2 /g;


	# ';' の後に文字があるなら半角スペースを挿入
	$_=~s/;([^ ])/; $1/g;

	# ',' 後にスペースを挿入
	$_=~s/,([^ ])/, $1/g;

	# '+' や '-' などの一文字の演算記号の前後にスペースを挿入
	$_=~s/([^+])\+([^+=])/$1 + $2/g;
	$_=~s/([^-<])\-([^-=>])/$1 - $2/g;
	# '*' はポインタの役割があるのでパス．

	print $_;
}
